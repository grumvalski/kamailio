#
# $id$ $date$ $author$ Ancuta Onofrei ancuta_onofrei@yahoo.com
#
# Emergency - CSCF configuration script
#

# ----------- global configuration parameters ------------------------

fork=yes
children=4

#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=3
log_stderror=no
#!endif

memdbg=4
memlog=4

log_facility=LOG_LOCAL1
#to be able to send to the internet
listen=127.0.0.1
port=6060
alias=lrf.open-ims.test:6060

check_via=no		# (cmd. line: -v)
dns=no			# (cmd. line: -r)
rev_dns=no		# (cmd. line: -R)

# ------------------ module loading ----------------------------------

mpath="/opt/kamailio/lib64/kamailio/modules/"
loadmodule "sl.so"
loadmodule "tm.so"
#loadmodule "dialog.so"
loadmodule "rr.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "enum.so"
loadmodule "lrf.so"

modparam("lrf","name","sip:127.0.0.1:6060")
modparam("lrf","using_lost_srv",1)
modparam("lrf","lost_server","http://127.0.0.1:8080/lost/LoSTServlet")
modparam("lrf","enable_locsip", 0)
modparam("lrf","locsip_srv_uri", "sip:127.0.0.1:9180")


# add value to ;lr param to make some broken UAs happy
modparam("rr", "enable_full_lr", 1)



# -------------------------  request routing logic -------------------

# main routing logic

#onreply_route{
	
#	log(1,">>       reply\n");
#	break;
#}


route[Sanity_Checks]
{
	# initial sanity checks -- messages with
	# max_forwards==0, or excessively long requests
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	};
}

route{

	route(Sanity_Checks);
	if(LRF_trans_in_processing()){
		sl_send_reply("100", "Trying");
		break;
	}

	t_newtran();

	if (method=="OPTIONS"){
		log(1, ">> received OPTIONS\n");
		if(!LRF_alloc_user_data()){ #returns esqk
			sl_send_reply("500", "could not alloc ESQK");
			t_release();
			break;

		}
		
		if(!LRF_has_loc()){ 
			if(LRF_uses_LOCSIP()){
				#send a SUBSCRIBE to the GLE to ask for the location
				#TODO: if not anonymous
				if(LRF_subscribe_LOCSIP()){
					log(1, ">> sent the Subscribe for LocSIP\n");
					break;
				}
			}
		}else {
			LRF_parse_user_loc(); #parse and save the pointer
			if(($retcode == -3) || ($retcode==-5)){
				sl_send_reply("424", "no supported location format");
				LRF_del_user_data();
				t_release();
				break;
			}else if($retcode == -4){
				sl_send_reply("404", "bad location information");
				LRF_del_user_data();
				t_release();
				break;
			}
		}
		
		route(Retrieve_psap);
		
	}else if(method == "NOTIFY"){
	
		if(LRF_process_loc_notify()){
		
			LRF_sw2options();
			route(Retrieve_psap);
		}else{
			LRF_sw2options();
			LRF_options_empty_repl("400", "No available location");
			LRF_del_user_data();
			break;
		}
	}
		
}

route[Retrieve_psap]
{
	log(1, ">> retrieve PSAP\n");
	if(!LRF_get_psap()){ #and set the psap in the user data
		LRF_options_empty_repl("404", "No PSAP found");
		LRF_del_user_data();
		break;
	}

	if(!LRF_call_query_resp()){
		LRF_options_empty_repl("500", "Internal error");
		LRF_del_user_data();
		break;
	}
#	if(uri=~".*anonymous.*")
	LRF_del_user_data();
	t_release();
	break;

}




